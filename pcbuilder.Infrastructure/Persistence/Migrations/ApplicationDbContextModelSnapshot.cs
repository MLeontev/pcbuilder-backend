// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using pcbuilder.Infrastructure.Persistence;

#nullable disable

namespace pcbuilder.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Cases.CaseWaterCoolingSize", b =>
                {
                    b.Property<int>("CaseId")
                        .HasColumnType("integer");

                    b.Property<int>("WaterCoolingSizeId")
                        .HasColumnType("integer");

                    b.HasKey("CaseId", "WaterCoolingSizeId");

                    b.HasIndex("WaterCoolingSizeId");

                    b.ToTable("CaseWaterCoolingSizes");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Common.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Common.Build", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Builds");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Common.BuildComponent", b =>
                {
                    b.Property<int>("BuildId")
                        .HasColumnType("integer");

                    b.Property<int>("PcComponentId")
                        .HasColumnType("integer");

                    b.HasKey("BuildId", "PcComponentId");

                    b.HasIndex("PcComponentId");

                    b.ToTable("BuildComponents");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Common.PcComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("PcComponents");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Common.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Coolers.CoolerSocket", b =>
                {
                    b.Property<int>("CoolerId")
                        .HasColumnType("integer");

                    b.Property<int>("SocketId")
                        .HasColumnType("integer");

                    b.HasKey("CoolerId", "SocketId");

                    b.HasIndex("SocketId");

                    b.ToTable("CoolerSockets");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Coolers.WaterCoolingSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("WaterCoolingSizes");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Cpus.CpuMemory", b =>
                {
                    b.Property<int>("CpuId")
                        .HasColumnType("integer");

                    b.Property<int>("MemoryTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxMemorySpeed")
                        .HasColumnType("integer");

                    b.HasKey("CpuId", "MemoryTypeId");

                    b.HasIndex("MemoryTypeId");

                    b.ToTable("CpuMemories");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Cpus.CpuSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CpuSeries");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Cpus.Socket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sockets");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Gpus.GpuChipset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GpuChipsets");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Gpus.GpuPowerConnector", b =>
                {
                    b.Property<int>("PowerConnectorId")
                        .HasColumnType("integer");

                    b.Property<int>("GpuId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("PowerConnectorId", "GpuId");

                    b.HasIndex("GpuId");

                    b.ToTable("GpuPowerConnectors");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Motherboards.MotherboardChipset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MotherboardChipsets");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Motherboards.MotherboardFormFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MotherboardFormFactors");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Motherboards.MotherboardPowerConnector", b =>
                {
                    b.Property<int>("MotherboardId")
                        .HasColumnType("integer");

                    b.Property<int>("PowerConnectorId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("MotherboardId", "PowerConnectorId");

                    b.HasIndex("PowerConnectorId");

                    b.ToTable("MotherboardPowerConnectors");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Motherboards.MotherboardStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MotherboardId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MotherboardId");

                    b.ToTable("MotherboardStorages");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Motherboards.MotherboardStorageFormFactor", b =>
                {
                    b.Property<int>("MotherboardStorageId")
                        .HasColumnType("integer");

                    b.Property<int>("StorageFormFactorId")
                        .HasColumnType("integer");

                    b.HasKey("MotherboardStorageId", "StorageFormFactorId");

                    b.HasIndex("StorageFormFactorId");

                    b.ToTable("MotherboardStorageFormFactors");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Motherboards.MotherboardStorageInterface", b =>
                {
                    b.Property<int>("MotherboardStorageId")
                        .HasColumnType("integer");

                    b.Property<int>("StorageInterfaceId")
                        .HasColumnType("integer");

                    b.HasKey("MotherboardStorageId", "StorageInterfaceId");

                    b.HasIndex("StorageInterfaceId");

                    b.ToTable("MotherboardStorageInterfaces");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.PowerSupplies.PowerConnector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Pins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PowerConnectors");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.PowerSupplies.PowerConnectorCompatibility", b =>
                {
                    b.Property<int>("SourceConnectorId")
                        .HasColumnType("integer");

                    b.Property<int>("CompatibleConnectorId")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredQuantity")
                        .HasColumnType("integer");

                    b.HasKey("SourceConnectorId", "CompatibleConnectorId");

                    b.HasIndex("CompatibleConnectorId");

                    b.ToTable("PowerConnectorCompatibilities");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.PowerSupplies.PsuEfficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PsuEfficiencies");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.PowerSupplies.PsuPowerConnector", b =>
                {
                    b.Property<int>("PowerSupplyId")
                        .HasColumnType("integer");

                    b.Property<int>("PowerConnectorId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("PowerSupplyId", "PowerConnectorId");

                    b.HasIndex("PowerConnectorId");

                    b.ToTable("PsuPowerConnectors");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Ram.MemoryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MemoryTypes");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Storage.StorageFormFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StorageFormFactors");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Storage.StorageInterface", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StorageInterfaces");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Storage.StorageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StorageTypes");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Cases.Case", b =>
                {
                    b.HasBaseType("pcbuilder.Domain.Models.Common.PcComponent");

                    b.Property<int>("MaxCoolerHeight")
                        .HasColumnType("integer");

                    b.Property<int>("MaxGpuLength")
                        .HasColumnType("integer");

                    b.Property<int>("MaxMotherboardFormFactorId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPsuLength")
                        .HasColumnType("integer");

                    b.Property<int>("Slots25")
                        .HasColumnType("integer");

                    b.Property<int>("Slots35")
                        .HasColumnType("integer");

                    b.HasIndex("MaxMotherboardFormFactorId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Coolers.Cooler", b =>
                {
                    b.HasBaseType("pcbuilder.Domain.Models.Common.PcComponent");

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Tdp")
                        .HasColumnType("integer");

                    b.Property<int?>("WaterCoolingSizeId")
                        .HasColumnType("integer");

                    b.HasIndex("WaterCoolingSizeId");

                    b.ToTable("Coolers");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Cpus.Cpu", b =>
                {
                    b.HasBaseType("pcbuilder.Domain.Models.Common.PcComponent");

                    b.Property<decimal>("BaseClock")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BoostClock")
                        .HasColumnType("numeric");

                    b.Property<int>("Cores")
                        .HasColumnType("integer");

                    b.Property<bool>("IntegratedGpu")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxMemoryCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("SeriesId")
                        .HasColumnType("integer");

                    b.Property<int>("SocketId")
                        .HasColumnType("integer");

                    b.Property<int>("Tdp")
                        .HasColumnType("integer");

                    b.Property<int>("Threads")
                        .HasColumnType("integer");

                    b.HasIndex("SeriesId");

                    b.HasIndex("SocketId");

                    b.ToTable("Cpus");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Gpus.Gpu", b =>
                {
                    b.HasBaseType("pcbuilder.Domain.Models.Common.PcComponent");

                    b.Property<int>("BoostClock")
                        .HasColumnType("integer");

                    b.Property<int>("BusWidth")
                        .HasColumnType("integer");

                    b.Property<int>("ChipsetId")
                        .HasColumnType("integer");

                    b.Property<int>("CoreClock")
                        .HasColumnType("integer");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<int>("MemoryCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("PcieLanes")
                        .HasColumnType("integer");

                    b.Property<string>("PcieVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecommendedPsuPower")
                        .HasColumnType("integer");

                    b.Property<int>("Tdp")
                        .HasColumnType("integer");

                    b.HasIndex("ChipsetId");

                    b.ToTable("Gpus");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Motherboards.Motherboard", b =>
                {
                    b.HasBaseType("pcbuilder.Domain.Models.Common.PcComponent");

                    b.Property<int>("FormFactorId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxMemoryCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("MaxMemorySpeed")
                        .HasColumnType("integer");

                    b.Property<int>("MemorySlots")
                        .HasColumnType("integer");

                    b.Property<int>("MemoryTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("MotherboardChipsetId")
                        .HasColumnType("integer");

                    b.Property<int>("PcieSlotsCount")
                        .HasColumnType("integer");

                    b.Property<string>("PcieVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SocketId")
                        .HasColumnType("integer");

                    b.HasIndex("FormFactorId");

                    b.HasIndex("MemoryTypeId");

                    b.HasIndex("MotherboardChipsetId");

                    b.HasIndex("SocketId");

                    b.ToTable("Motherboards");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.PowerSupplies.PowerSupply", b =>
                {
                    b.HasBaseType("pcbuilder.Domain.Models.Common.PcComponent");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<int>("Power")
                        .HasColumnType("integer");

                    b.Property<int>("PsuEfficiencyId")
                        .HasColumnType("integer");

                    b.HasIndex("PsuEfficiencyId");

                    b.ToTable("PowerSupplies");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Ram.Ram", b =>
                {
                    b.HasBaseType("pcbuilder.Domain.Models.Common.PcComponent");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<int>("MemoryTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Modules")
                        .HasColumnType("integer");

                    b.HasIndex("MemoryTypeId");

                    b.ToTable("Rams");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Storage.Storage", b =>
                {
                    b.HasBaseType("pcbuilder.Domain.Models.Common.PcComponent");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("ReadSpeed")
                        .HasColumnType("integer");

                    b.Property<int>("StorageFormFactorId")
                        .HasColumnType("integer");

                    b.Property<int>("StorageInterfaceId")
                        .HasColumnType("integer");

                    b.Property<int>("StorageTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("WriteSpeed")
                        .HasColumnType("integer");

                    b.HasIndex("StorageFormFactorId");

                    b.HasIndex("StorageInterfaceId");

                    b.HasIndex("StorageTypeId");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Common.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Common.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Common.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Common.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Cases.CaseWaterCoolingSize", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Cases.Case", "Case")
                        .WithMany("CaseWaterCoolingSizes")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Coolers.WaterCoolingSize", "WaterCoolingSize")
                        .WithMany()
                        .HasForeignKey("WaterCoolingSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("WaterCoolingSize");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Common.Build", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Common.User", "User")
                        .WithMany("Builds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Common.BuildComponent", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Common.Build", "Build")
                        .WithMany("BuildComponents")
                        .HasForeignKey("BuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Common.PcComponent", "PcComponent")
                        .WithMany()
                        .HasForeignKey("PcComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Build");

                    b.Navigation("PcComponent");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Common.PcComponent", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Common.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Coolers.CoolerSocket", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Coolers.Cooler", "Cooler")
                        .WithMany("CoolerSockets")
                        .HasForeignKey("CoolerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Cpus.Socket", "Socket")
                        .WithMany()
                        .HasForeignKey("SocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cooler");

                    b.Navigation("Socket");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Cpus.CpuMemory", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Cpus.Cpu", "Cpu")
                        .WithMany("CpuMemories")
                        .HasForeignKey("CpuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Ram.MemoryType", "MemoryType")
                        .WithMany()
                        .HasForeignKey("MemoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cpu");

                    b.Navigation("MemoryType");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Gpus.GpuPowerConnector", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Gpus.Gpu", "Gpu")
                        .WithMany("GpuPowerConnectors")
                        .HasForeignKey("GpuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.PowerSupplies.PowerConnector", "PowerConnector")
                        .WithMany()
                        .HasForeignKey("PowerConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gpu");

                    b.Navigation("PowerConnector");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Motherboards.MotherboardPowerConnector", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Motherboards.Motherboard", "Motherboard")
                        .WithMany("MotherboardPowerConnectors")
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.PowerSupplies.PowerConnector", "PowerConnector")
                        .WithMany()
                        .HasForeignKey("PowerConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motherboard");

                    b.Navigation("PowerConnector");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Motherboards.MotherboardStorage", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Motherboards.Motherboard", "Motherboard")
                        .WithMany("MotherboardStorages")
                        .HasForeignKey("MotherboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motherboard");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Motherboards.MotherboardStorageFormFactor", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Motherboards.MotherboardStorage", "MotherboardStorageSlot")
                        .WithMany("SupportedFormFactors")
                        .HasForeignKey("MotherboardStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Storage.StorageFormFactor", "StorageFormFactor")
                        .WithMany()
                        .HasForeignKey("StorageFormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MotherboardStorageSlot");

                    b.Navigation("StorageFormFactor");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Motherboards.MotherboardStorageInterface", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Motherboards.MotherboardStorage", "MotherboardStorageSlot")
                        .WithMany("SupportedInterfaces")
                        .HasForeignKey("MotherboardStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Storage.StorageInterface", "StorageInterface")
                        .WithMany()
                        .HasForeignKey("StorageInterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MotherboardStorageSlot");

                    b.Navigation("StorageInterface");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.PowerSupplies.PowerConnectorCompatibility", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.PowerSupplies.PowerConnector", "CompatibleConnector")
                        .WithMany()
                        .HasForeignKey("CompatibleConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.PowerSupplies.PowerConnector", "SourceConnector")
                        .WithMany()
                        .HasForeignKey("SourceConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompatibleConnector");

                    b.Navigation("SourceConnector");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.PowerSupplies.PsuPowerConnector", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.PowerSupplies.PowerConnector", "PowerConnector")
                        .WithMany()
                        .HasForeignKey("PowerConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.PowerSupplies.PowerSupply", "PowerSupply")
                        .WithMany("PsuPowerConnectors")
                        .HasForeignKey("PowerSupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PowerConnector");

                    b.Navigation("PowerSupply");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Cases.Case", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Common.PcComponent", null)
                        .WithOne()
                        .HasForeignKey("pcbuilder.Domain.Models.Cases.Case", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Motherboards.MotherboardFormFactor", "MaxMotherboardFormFactor")
                        .WithMany()
                        .HasForeignKey("MaxMotherboardFormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaxMotherboardFormFactor");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Coolers.Cooler", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Common.PcComponent", null)
                        .WithOne()
                        .HasForeignKey("pcbuilder.Domain.Models.Coolers.Cooler", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Coolers.WaterCoolingSize", "WaterCoolingSize")
                        .WithMany()
                        .HasForeignKey("WaterCoolingSizeId");

                    b.Navigation("WaterCoolingSize");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Cpus.Cpu", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Common.PcComponent", null)
                        .WithOne()
                        .HasForeignKey("pcbuilder.Domain.Models.Cpus.Cpu", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Cpus.CpuSeries", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Cpus.Socket", "Socket")
                        .WithMany()
                        .HasForeignKey("SocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");

                    b.Navigation("Socket");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Gpus.Gpu", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Gpus.GpuChipset", "Chipset")
                        .WithMany()
                        .HasForeignKey("ChipsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Common.PcComponent", null)
                        .WithOne()
                        .HasForeignKey("pcbuilder.Domain.Models.Gpus.Gpu", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chipset");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Motherboards.Motherboard", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Motherboards.MotherboardFormFactor", "FormFactor")
                        .WithMany()
                        .HasForeignKey("FormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Common.PcComponent", null)
                        .WithOne()
                        .HasForeignKey("pcbuilder.Domain.Models.Motherboards.Motherboard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Ram.MemoryType", "MemoryType")
                        .WithMany()
                        .HasForeignKey("MemoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Motherboards.MotherboardChipset", "MotherboardChipset")
                        .WithMany()
                        .HasForeignKey("MotherboardChipsetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Cpus.Socket", "Socket")
                        .WithMany()
                        .HasForeignKey("SocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormFactor");

                    b.Navigation("MemoryType");

                    b.Navigation("MotherboardChipset");

                    b.Navigation("Socket");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.PowerSupplies.PowerSupply", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Common.PcComponent", null)
                        .WithOne()
                        .HasForeignKey("pcbuilder.Domain.Models.PowerSupplies.PowerSupply", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.PowerSupplies.PsuEfficiency", "PsuEfficiency")
                        .WithMany()
                        .HasForeignKey("PsuEfficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PsuEfficiency");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Ram.Ram", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Common.PcComponent", null)
                        .WithOne()
                        .HasForeignKey("pcbuilder.Domain.Models.Ram.Ram", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Ram.MemoryType", "MemoryType")
                        .WithMany()
                        .HasForeignKey("MemoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MemoryType");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Storage.Storage", b =>
                {
                    b.HasOne("pcbuilder.Domain.Models.Common.PcComponent", null)
                        .WithOne()
                        .HasForeignKey("pcbuilder.Domain.Models.Storage.Storage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Storage.StorageFormFactor", "StorageFormFactor")
                        .WithMany()
                        .HasForeignKey("StorageFormFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Storage.StorageInterface", "StorageInterface")
                        .WithMany()
                        .HasForeignKey("StorageInterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pcbuilder.Domain.Models.Storage.StorageType", "StorageType")
                        .WithMany()
                        .HasForeignKey("StorageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StorageFormFactor");

                    b.Navigation("StorageInterface");

                    b.Navigation("StorageType");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Common.Build", b =>
                {
                    b.Navigation("BuildComponents");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Common.User", b =>
                {
                    b.Navigation("Builds");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Motherboards.MotherboardStorage", b =>
                {
                    b.Navigation("SupportedFormFactors");

                    b.Navigation("SupportedInterfaces");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Cases.Case", b =>
                {
                    b.Navigation("CaseWaterCoolingSizes");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Coolers.Cooler", b =>
                {
                    b.Navigation("CoolerSockets");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Cpus.Cpu", b =>
                {
                    b.Navigation("CpuMemories");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Gpus.Gpu", b =>
                {
                    b.Navigation("GpuPowerConnectors");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.Motherboards.Motherboard", b =>
                {
                    b.Navigation("MotherboardPowerConnectors");

                    b.Navigation("MotherboardStorages");
                });

            modelBuilder.Entity("pcbuilder.Domain.Models.PowerSupplies.PowerSupply", b =>
                {
                    b.Navigation("PsuPowerConnectors");
                });
#pragma warning restore 612, 618
        }
    }
}
